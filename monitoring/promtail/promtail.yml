# Promtail Configuration for RAG System Log Collection
server:
  http_listen_port: 9080
  grpc_listen_port: 0

# Positions file to track log reading progress
positions:
  filename: /tmp/positions.yaml

# Loki client configuration
clients:
  - url: http://loki:3100/loki/api/v1/push

# Log scraping configuration
scrape_configs:
  # System logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: system-logs
          __path__: /var/log/*.log

  # Docker container logs
  - job_name: containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: containers
          __path__: /var/lib/docker/containers/*/*-json.log
    pipeline_stages:
      # Parse Docker JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - labels:
          stream:
      - output:
          source: output

  # RAG Backend application logs
  - job_name: rag-backend
    static_configs:
      - targets:
          - localhost
        labels:
          job: rag-backend
          component: api
          __path__: /var/log/rag-backend/*.log
    pipeline_stages:
      # Parse structured logs if JSON format
      - json:
          expressions:
            level: level
            message: message
            timestamp: timestamp
            module: module
      - labels:
          level:
          module:
      - timestamp:
          source: timestamp
          format: RFC3339
      - output:
          source: message

  # ChromaDB logs  
  - job_name: chromadb
    static_configs:
      - targets:
          - localhost
        labels:
          job: chromadb
          component: database
          __path__: /var/log/chromadb/*.log

  # Reflex application logs
  - job_name: reflex
    static_configs:
      - targets:
          - localhost
        labels:
          job: reflex
          component: frontend
          __path__: /var/log/reflex/*.log

  # Nginx/Load Balancer logs (if used)
  - job_name: nginx
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          component: loadbalancer
          __path__: /var/log/nginx/*.log
    pipeline_stages:
      # Parse nginx access logs
      - regex:
          expression: '^(?P<remote_addr>[\d\.]+) - (?P<remote_user>[^ ]*) \[(?P<time>[^\]]*)\] "(?P<method>[^ ]*) (?P<path>[^ ]*) (?P<protocol>[^"]*)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          method:
          status:
          path:
      - timestamp:
          source: time
          format: 02/Jan/2006:15:04:05 -0700

  # Application-specific error logs
  - job_name: application-errors
    static_configs:
      - targets:
          - localhost
        labels:
          job: application-errors
          severity: error
          __path__: /var/log/*/error.log
    pipeline_stages:
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?P<level>\w+) (?P<message>.*)'
      - labels:
          level:
      - timestamp:
          source: timestamp
          format: 2006-01-02 15:04:05

  # Monitoring stack logs
  - job_name: monitoring
    static_configs:
      - targets:
          - localhost
        labels:
          job: monitoring
          __path__: /var/log/{prometheus,grafana,alertmanager}/*.log

# Global configuration
global:
  scrape_timeout: 10s