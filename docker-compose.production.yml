version: '3.8'

# Production RAG System with Enhanced Security and Monitoring
services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    depends_on:
      - reflex-app
      - rag-backend
      - grafana
    networks:
      - rag-network
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reflex Frontend Application
  reflex-app:
    build:
      context: .
      dockerfile: Dockerfile.reflex
    container_name: rag-reflex-prod
    restart: unless-stopped
    volumes:
      - ./data:/app/data:Z
      - ./app:/app/app:Z
      - ./logs/reflex:/var/log/reflex
    environment:
      - PYTHONPATH=/app
      - REFLEX_HOST=0.0.0.0
      - REFLEX_PORT=3000
      - API_BASE_URL=http://rag-backend:8000
      - OLLAMA_HOST=${OLLAMA_HOST:-host.docker.internal:11434}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - rag-network
    depends_on:
      - rag-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # RAG Backend API
  rag-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-backend-prod
    restart: unless-stopped
    volumes:
      - ./data:/app/data:Z
      - ./app:/app:Z
      - ./logs/backend:/var/log/rag-backend
    environment:
      - PYTHONPATH=/app
      - OLLAMA_HOST=${OLLAMA_HOST:-host.docker.internal:11434}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
    networks:
      - rag-network
      - monitoring
    depends_on:
      - chromadb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:0.4.15
    container_name: rag-chromadb-prod
    restart: unless-stopped
    volumes:
      - chroma_data:/chroma/chroma
      - ./logs/chromadb:/var/log/chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://rag-backend:8000"]
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
    networks:
      - rag-network
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Redis for Caching and Sessions
  redis:
    image: redis:7.2-alpine
    container_name: rag-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./monitoring/redis/redis.conf:/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - rag-network
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Monitoring Stack (from monitoring compose)
  prometheus:
    extends:
      file: docker-compose.monitoring.yml
      service: prometheus
    networks:
      - monitoring

  grafana:
    extends:
      file: docker-compose.monitoring.yml
      service: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://yourdomain.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - monitoring

  alertmanager:
    extends:
      file: docker-compose.monitoring.yml
      service: alertmanager
    networks:
      - monitoring

  loki:
    extends:
      file: docker-compose.monitoring.yml
      service: loki
    networks:
      - monitoring

  promtail:
    extends:
      file: docker-compose.monitoring.yml
      service: promtail
    volumes:
      - ./monitoring/promtail:/etc/promtail:ro
      - ./logs:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring

  # Security Scanner (optional)
  trivy:
    image: aquasec/trivy:latest
    container_name: rag-security-scanner
    restart: "no"
    volumes:
      - ./security/trivy-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --cache-dir /root/.cache/trivy server --listen 0.0.0.0:4954
    networks:
      - monitoring
    profiles:
      - security-scan

  # Backup Service
  backup:
    image: alpine:3.18
    container_name: rag-backup
    restart: unless-stopped
    volumes:
      - chroma_data:/backup/chromadb:ro
      - redis_data:/backup/redis:ro
      - ./data:/backup/documents:ro
      - ./backup-scripts:/scripts:ro
      - backup_storage:/backup/output
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${BACKUP_S3_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_S3_SECRET_KEY}
    command: sh -c "apk add --no-cache dcron && crond -f"
    networks:
      - rag-network
    profiles:
      - backup

volumes:
  chroma_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CHROMA_DATA_PATH:-./data/chroma}
  redis_data:
    driver: local
  backup_storage:
    driver: local

networks:
  rag-network:
    driver: bridge
    name: rag-production
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    external: true
    name: rag-monitoring

# Security and resource constraints
x-security-options: &security-options
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: true
  tmpfs:
    - /tmp
    - /run