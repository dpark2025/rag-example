apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-backend
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: rag-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: rag-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rag-backend
        app.kubernetes.io/component: api
    spec:
      containers:
      - name: rag-backend
        image: rag-system/backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PYTHONPATH
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: PYTHONPATH
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: LOG_LEVEL
        - name: CHROMA_HOST
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: CHROMA_HOST
        - name: CHROMA_PORT
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: CHROMA_PORT
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: REDIS_PORT
        - name: OLLAMA_HOST
          valueFrom:
            configMapKeyRef:
              name: rag-system-config
              key: OLLAMA_HOST
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: rag-system-secrets
              key: SECRET_KEY
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: rag-system-secrets
              key: API_SECRET_KEY
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: rag-system-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rag-system-secrets
              key: REDIS_PASSWORD
        - name: CHROMA_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: rag-system-secrets
              key: CHROMA_AUTH_TOKEN
        volumeMounts:
        - name: document-storage
          mountPath: /app/data
        - name: logs
          mountPath: /var/log/rag-backend
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: document-storage
        persistentVolumeClaim:
          claimName: document-pvc
      - name: logs
        emptyDir: {}
      securityContext:
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: rag-backend-service
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: api
spec:
  selector:
    app.kubernetes.io/name: rag-backend
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: document-pvc
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany  # Multiple pods need access
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rag-backend-hpa
  namespace: rag-system
  labels:
    app.kubernetes.io/name: rag-backend
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rag-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60