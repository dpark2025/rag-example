name: RAG System Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8002:8000
        options: --health-cmd="curl -f http://localhost:8000/api/v1/heartbeat" --health-interval=30s --health-timeout=10s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r app/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 app/ tests/ --max-line-length=100 --ignore=E203,W503 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --max-line-length=100 --ignore=E203,W503 --count --exit-zero --max-complexity=10 --statistics
    
    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        # Start the RAG backend in background
        cd app && python main.py &
        sleep 10
        # Run integration tests
        pytest tests/integration/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/app
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
    
    - name: Check code formatting with black
      run: |
        black --check app/ tests/ --line-length=100
    
    - name: Check import sorting with isort
      run: |
        isort --check-only app/ tests/ --profile black
    
    - name: Security scan with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r app/requirements.txt
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-sort=mean --benchmark-json=benchmark.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  accessibility-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install axe-selenium-python selenium
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@master
    
    - name: Run accessibility tests
      run: |
        pytest tests/accessibility/ -v --tb=short || true
    
    - name: Upload accessibility reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-reports
        path: accessibility-report.json

  docker-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t rag-system:test .
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name rag-test -p 8000:8000 rag-system:test
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop rag-test

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, quality-checks]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Checks | ${{ needs.quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.quality-checks.result }}" == "success" ]]; then
          echo "✅ All required tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
        fi