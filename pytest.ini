[tool:pytest]
# Pytest configuration for RAG System testing

# Test discovery
testpaths = tests
pythonpath = app
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junit-xml=test-results.xml

# Async support
asyncio_mode = auto

# Warnings - suppress external library deprecation warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning  
    ignore::cryptography.utils.CryptographyDeprecationWarning
    ignore:.*urllib3.*:DeprecationWarning
    ignore:.*aiohttp.*:DeprecationWarning
    ignore:.*google.*:DeprecationWarning
    ignore:.*_upb.*:DeprecationWarning
    ignore:.*SwigPy.*:DeprecationWarning
    ignore:.*swigvarlink.*:DeprecationWarning
    ignore:.*ARC4.*:cryptography.utils.CryptographyDeprecationWarning
    ignore:.*cryptography.*:DeprecationWarning
    ignore:.*pypdf.*:DeprecationWarning
    ignore:.*PyType_Spec.*:DeprecationWarning
    ignore:.*__module__.*:DeprecationWarning

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interaction
    e2e: End-to-end tests for complete workflows
    performance: Performance and load tests
    accessibility: Accessibility compliance tests
    security: Security and vulnerability tests
    stress: Stress and resource exhaustion tests
    regression: Regression tests for critical paths
    slow: Slow tests that take >10 seconds (use --runslow to include)
    requires_ollama: Tests that require Ollama to be running
    requires_chromadb: Tests that require ChromaDB to be available

# Timeout settings
timeout = 300
timeout_method = thread

# Coverage settings
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */alembic/*
    setup.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

precision = 2
show_missing = True
skip_covered = False

[coverage:html]
directory = htmlcov
title = RAG System Test Coverage